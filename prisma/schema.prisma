generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Volunteers {
  id            String             @id @default(uuid())
  contacted     Boolean            @default(false)
  notes         String             @default("")
  name          String             @db.VarChar(255)
  email         String             @db.VarChar(255)
  phone         String             @db.VarChar(255)
  shirtSize     ShirtSizes?
  referral      String             @db.VarChar(255)
  shifts        VolunteersShifts[]
  Waiver        Waiver[]
  verifications Verifications[]
  accessTokens  AccessTokens[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  emailedAt     DateTime?
}

model Locations {
  id      String @id @default(uuid())
  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  slug    String @unique @db.VarChar(255)
  jobs    Jobs[]
}

model Jobs {
  id           String         @id @default(uuid())
  name         String         @db.VarChar(255)
  description  String         @db.VarChar(255)
  locationId   String?        @db.VarChar(36)
  location     Locations?     @relation(fields: [locationId], references: [id])
  shifts       Shifts[]
  restrictions Restrictions[]
}

model Shifts {
  id         String             @id @default(uuid())
  startTime  DateTime
  endTime    DateTime
  capacity   Int
  volunteers VolunteersShifts[]
  jobId      String?            @db.VarChar(36)
  job        Jobs?              @relation(fields: [jobId], references: [id])

  @@unique([jobId, startTime], name: "jobId_shiftTime")
}

model Restrictions {
  id    String  @id @default(uuid())
  name  String  @db.VarChar(255)
  slug  String  @unique @db.VarChar(255)
  jobId String? @db.VarChar(36)
  job   Jobs?   @relation(fields: [jobId], references: [id])
}

model VolunteersShifts {
  id          String     @id @default(uuid())
  volunteerId String     @db.VarChar(36)
  volunteer   Volunteers @relation(fields: [volunteerId], references: [id])
  shiftId     String     @db.VarChar(36)
  shift       Shifts     @relation(fields: [shiftId], references: [id])
}

model Waiver {
  id                    String     @id @default(uuid())
  volunteerId           String     @db.VarChar(36)
  volunteer             Volunteers @relation(fields: [volunteerId], references: [id])
  signed                Boolean
  signedAt              DateTime
  type                  WaiverType
  emergencyContactName  String
  emergencyContactPhone String
  emergencyContactEmail String
  minor__name           String?
  minor__parentName     String?
  minor__DOB            DateTime?
  minor__guardianEmail  String?
  adult__name           String?
}

model Verifications {
  id          String     @id @default(uuid())
  volunteerId String     @db.VarChar(36)
  volunteer   Volunteers @relation(fields: [volunteerId], references: [id])
  token       String     @unique
  expiresAt   DateTime
  verified    Boolean    @default(false)
}

model AccessTokens {
  id          String     @id @default(uuid())
  volunteerId String     @db.VarChar(36)
  volunteer   Volunteers @relation(fields: [volunteerId], references: [id])
  expiresAt   DateTime
}

enum WaiverType {
  ADULT
  MINOR
}

enum ShirtSizes {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}
